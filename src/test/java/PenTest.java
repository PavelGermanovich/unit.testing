import org.junit.Assert;
import org.junit.Test;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintStream;
import java.nio.file.Files;

public class PenTest {

    private static final int inkContainerValuePositive = 20;
    private static final int inkContainerValueNegative = -1;
    private static final double sizeLetter = 2.0;
    private static final String colorGreen = "GREEN";
    private final Pen penWithOneArg = new Pen(inkContainerValuePositive);
    private final Pen penWithTwoArgs = new Pen(inkContainerValuePositive, sizeLetter);
    private final Pen penWithThreeArgs = new Pen(inkContainerValuePositive, sizeLetter, colorGreen);
    private final Pen penWithNegativeInkValue = new Pen(inkContainerValueNegative, sizeLetter, colorGreen);
    private static final String wordForWriteMethod = "test";
    private static final String wordToTestSubstringReturn = "testWriteFunctionLongSubstring";
    private static final String emptyString = "";

    private String fieldInk = "inkContainerValue";
    private String fieldColor = "color";


    @Test
    public void testPen_shouldReturnColorTransferred() {
        Pen pen = new Pen(inkContainerValuePositive, sizeLetter, colorGreen);
        Assert.assertEquals(String.format("Colors don`t match: %s was transferred and %s was returned", colorGreen,
                pen.getColor()), colorGreen, pen.getColor());
    }

    @Test
    public void TestPen_shouldReturnColorByDefault() {
        String defaultColor = (String) Utils.getFieldValue(fieldColor, penWithTwoArgs);
        Assert.assertEquals(String.format("Default color %s doesnot match the one which was returned - %s",
                defaultColor, penWithTwoArgs.getColor()), defaultColor, penWithTwoArgs.getColor());
    }

    @Test
    public void testPenIsWork_returnTrueWithPositiveInk() {
        Pen penWithPositiveInk = new Pen(inkContainerValuePositive);
        Assert.assertEquals("True is not returned when ink value > 0", true, penWithPositiveInk.isWork());
    }

    @Test
    public void testPenIsWork_returnFalseWithNegativeInk() {
        Pen penWithNegativeInk = new Pen(inkContainerValueNegative);
        Assert.assertEquals("False is not returned when ink value < 0", false, penWithNegativeInk.isWork());
    }

    @Test
    public void testPenDoSomethingElse_shouldOutputColor() throws IOException {
        String inputStreamString = "";
        PrintStream ps = null;
        File file = new File("temp.txt");

        try {
            ps = new PrintStream(file);
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
        PrintStream standartOut = System.out;
        System.setOut(ps);
        penWithThreeArgs.doSomethingElse();

        Assert.assertEquals("Returned color doesnot match the one, which was specified in pen", colorGreen,
                Files.readAllLines(file.toPath().toAbsolutePath()).get(0));
        System.setOut(standartOut);
    }

    @Test
    public void testPenWrite_shouldReturnEmptyStringWhenInkNegative() {
        Assert.assertEquals("Empty string doesnot returned, when ink value < 0","",
                penWithNegativeInkValue.write(wordForWriteMethod));
    }

    @Test
    public void testPenWrite_shouldReturnWholeWordWhenInkBiggerThanWordSize() {
        int lengthOfWord = wordForWriteMethod.length();
        double sizeOfWord = lengthOfWord*sizeLetter;
        int inkBiggerThanSizeOfWord = (int)sizeOfWord+10;
        Pen penWithInkBiggerThanSizeOfWord = new Pen(inkBiggerThanSizeOfWord, sizeLetter, colorGreen);

        Assert.assertEquals("Whole word should be returned when ink value is bigger than size of word",
                wordForWriteMethod, penWithInkBiggerThanSizeOfWord.write(wordForWriteMethod));
    }

    @Test
    public void testPenWrite_shouldReturnCorrectSubstring() {
        String expectedSubstring = wordToTestSubstringReturn.substring(0, (int)(inkContainerValuePositive/sizeLetter));
        Assert.assertEquals("Substring doesnot take into account size of letter!", expectedSubstring,
                penWithThreeArgs.write(wordToTestSubstringReturn));

   }

   @Test
    public void testPenWrite_returnEmptyStringWhenLetterSizeZero() {
        int sizeLetterNull =0;
        Pen penWithSizeLetterNull = new Pen(inkContainerValuePositive, sizeLetterNull);
        Assert.assertEquals("Pen with letter size equals 0 should return empty string", emptyString,
                penWithSizeLetterNull.write(wordForWriteMethod));
   }

   @Test
   public void testPenWrite_returnEmptyStringWhenLetterSizeLessThanZero() {
        int sizeLetterLessThanNull = -1;
        Pen penWithSizeLetterLessThanNull = new Pen(inkContainerValuePositive, sizeLetterLessThanNull, colorGreen);
        Assert.assertEquals("Pen with letter size less than 0 should return empty string",
                emptyString, penWithSizeLetterLessThanNull.write(wordForWriteMethod));
   }

   @Test
    public void testPenWrite_shouldNotConsiderSpaces(){
        String wordWithSpace = "test spaces";
        String wordWithoutSpaces = wordWithSpace.replaceAll("\\s", "");
        int inkRemainsExpected = inkContainerValuePositive - wordWithoutSpaces.length(); //Size letter by default is 1.0
        penWithOneArg.write(wordWithSpace);
        int inkRemainsActual = (Integer) Utils.getFieldValue(fieldInk, penWithOneArg);
        Assert.assertEquals("Spaces cost ink!", inkRemainsExpected, inkRemainsActual);
   }

}